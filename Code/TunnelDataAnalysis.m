%% Tunnel Data Analysis
%
% This file runs a CRT_data_parser_2019 file and plots the relevant data

%% Look for the MAT file generated by CRT_data_parser_2019.m file
MATFile = dir('CRT_data_*.mat');
if isempty(MATFile)
    try
        delete('*.mat');
        CRT_data_parser_2019
        clearvars -except data_matrix % clear everthing but the data_matrix we want
    catch ME
        throw(ME);
    end
end

%% Data Parsing
%   Column  1:      Row number
%   Column  2:      Angle of attack (rad)
%   Column  3:      Elevator deflection (rad)
%   Column  4:      Rudder deflection (rad)
%   Column  5:      Air density (kg/m^3)
%   Column  6:      Air speed (m/s)
%   Column  7:      Normal force (N)
%   Column  8:      Standard deviation of normal force (N)
%   Column  9:      Transverse force (N)
%   Column 10:      Standard deviation of transverse force (N)
%   Column 11:      Axial force (N)
%   Column 12:      Standard deviation of axial force (N)
%   Column 13:      Normal Moment (N-m)
%   Column 14:      Standard deviation of normal moment (N-m)
%   Column 15:      Transverse moment (N-m)
%   Column 16:      Standard deviation of transverse moment (N-m)
%   Column 17:      Axial moment (N-m)
%   Column 18:      Standard deviation of axial moment (N-m)

% Load MAT file
load(MATFile.name);

% Generate variables from data_matrix
rowN   = data_matrix(:,1);
alpha  = data_matrix(:,2); % Angle of attack
deltaE = data_matrix(:,3);
% We think we did experiment for +-15 degrees but as the lab manuel suggest
% we had +-18 maximum limits for deltaE, so modify the data accordingly
deltaE(deltaE==15) = 18;
deltaE(deltaE==-15) = -18;
deltaR = data_matrix(:,4);
rho    = data_matrix(:,5); % Air density
Vinf   = data_matrix(:,6); % Air velocity

Z      = -data_matrix(:,7); % Body-defined normal force
SdZ    = data_matrix(:,8);

FT     = data_matrix(:,9);
SdFT   = data_matrix(:,10);

X      = -data_matrix(:,11); % Body-defined axial force
SdX    = data_matrix(:,12);

MN     = data_matrix(:,13);
SdMN   = data_matrix(:,14);

Ms     = data_matrix(:,15); % Sting moment
SdMs   = data_matrix(:,16);

MA     = data_matrix(:,17);
SdMA   = data_matrix(:,18);

alpha = deg2rad(alpha);

% deltaEArray
deltaEArray = [18,0,-18];

%% Define Geomatric Parameters of an Aircraft
% Mini Ultrastick model in the University of Minnesota closed-return wind
% tunnel.
xcg = -1.6*1e-2;            % [m]
zcg = 5*1e-2;               % [m]
cbar = 21.29*1e-2;          % Mean Aerodynamic Chord length [m]
bLE = 90*1e-2;              % Leading Edge Span [cm]
bTE = 98.50*1e-2;           % Trailing Edge Span [cm]
S = cbar*(bLE+bTE)/2;       % Wing Area [m^2]
deltaEmax = deg2rad(18);    % Trailing edge down [rad]
deltaEmin = deg2rad(-18);   % Trailing edge up [rad]
xMCCG = 1.6*1e-2;           % [m]
xac = 0.25*cbar;            % Aerodynamic Center [m]
alphamin = deg2rad(-10);
alphamax = deg2rad(22);

%% Priliminary Results
for i = 1:length(deltaEArray)
    % Get indexes for specific elevator deflection
    id = (deltaE==deltaEArray(i));
    Q = rho(id).*(Vinf(id).^2)/2;
    
    % Calculate the lift (L), drag (D) and the y-axis component of moment about
    % the center of gravity (Mcg) using the following:
    L = X(id).*sin(alpha(id)) - Z(id).*cos(alpha(id));
    D = -X(id).*cos(alpha(id)) - Z(id).*sin(alpha(id));
    Mcg = Ms(id) + zcg*X(id) - xcg*Z(id);
    
    % Propogate Standard Deviation
    SdL = SdX(id).*sin(alpha(id)) - SdZ(id).*cos(alpha(id));
    SdD = -SdX(id).*cos(alpha(id)) - SdZ(id).*sin(alpha(id));
    SdMcg = SdMs(id) + zcg*SdX(id) - xcg*SdZ(id);
    
    % AngleOfAttack
    AoA(:,i) = rad2deg(alpha(id));
    
    % Calculate the lift coefficient (CL); the drag coefficient (CD); the
    % lateral moment coefficient (Cl); the longitudinal moment coefficient
    % (CM); and the directional moment coefficient (CN) as follows
    CL(:,i) = L./(Q*S);
    CD(:,i) = D./(Q*S);
    CM(:,i) = Mcg./(Q*S*cbar);
    
    % Propogate Standard Deviation
    SdCL(:,i) = SdL./(Q*S);
    SdCD(:,i) = SdD./(Q*S);
    SdCM(:,i) = SdMcg./(Q*S);
end

%% Tunnel-Data-Plotting
% NOTE: For plotting purpose (legend) we use the convention as shown in
% textbook as +ve delta_e for downward deflection and negative delta_e for
% upward elevator deflection. However in the experimental data we used
% opposite convention.

%% ErrorBar Plot
% CL, CD, CM vs alpha
figure(1);errorbar(AoA(:,1),CL(:,1),SdCL(:,1),'d');
ylabel('Lift Coefficient (C_L)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Errorbar Plot for Lift Coefficient');
legend('\delta_e = -18^o (Upward)');

figure(2);errorbar(AoA(:,1),CD(:,1),SdCD(:,1),'o');
ylabel('Drag Coefficient (C_D)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Errorbar Plot for Drag Coefficient');
legend('\delta_e = -18^o (Upward)');

figure(3);errorbar(AoA(:,1),CM(:,1),SdCM(:,1),'o');
ylabel('Longitudinal Moment Coefficient (C_M)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Errorbar Plot for Longitudinal Moment Coefficient');
legend('\delta_e = -18^o (Upward)');

%% CL vs alpha
fprintf('===========================================\n');
figure(4);clf;hold on;Np=1:1:11;
plot(AoA(:,1),CL(:,1),'^','MarkerEdgeColor','r');
plot(AoA(:,2),CL(:,2),'s','MarkerEdgeColor','b');
plot(AoA(:,3),CL(:,3),'x','MarkerEdgeColor','m');
f1CL = fit(AoA(Np,1),CL(Np,1),'poly1');disp(f1CL);
f2CL = fit(AoA(Np,2),CL(Np,2),'poly1');disp(f2CL);
f3CL = fit(AoA(Np,3),CL(Np,3),'poly1');disp(f3CL);
plot(AoA(Np,1),f1CL(AoA(Np,1)),'-r');
plot(AoA(Np,2),f2CL(AoA(Np,2)),'-b');
plot(AoA(Np,3),f3CL(AoA(Np,3)),'-m');
ylabel('Lift Coefficient (C_L)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Lift Coefficient');
legend('\delta_e = -18^o (Upward)','\delta_e = 0^o (Level)','\delta_e = +18^o (Downward)');
hold off;grid on;

%% CD vs alpha
fprintf('===========================================\n');
figure(5);clf;hold on;Np=1:1:11;
plot(AoA(:,1),CD(:,1),'^','MarkerEdgeColor','r');
plot(AoA(:,2),CD(:,2),'s','MarkerEdgeColor','b');
plot(AoA(:,3),CD(:,3),'x','MarkerEdgeColor','m');
f1CD = fit(AoA(Np,1),CD(Np,1),'poly2');disp(f1CD);
f2CD = fit(AoA(Np,2),CD(Np,2),'poly2');disp(f2CD);
f3CD = fit(AoA(Np,3),CD(Np,3),'poly2');disp(f3CD);
plot(AoA(Np,1),f1CD(AoA(Np,1)),'-r');
plot(AoA(Np,2),f2CD(AoA(Np,2)),'-b');
plot(AoA(Np,3),f3CD(AoA(Np,3)),'-m');
legend('\delta_e = -18^o (Upward)','\delta_e = 0^o (Level)','\delta_e = +18^o (Downward)');
ylabel('Drag Coefficient (C_D)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Drag Coefficient');
hold off;grid on;

%% CM vs alpha
fprintf('===========================================\n');
figure(6);clf;hold on;Np=1:1:11;
plot(AoA(:,1),CM(:,1),'^','MarkerEdgeColor','r');
plot(AoA(:,2),CM(:,2),'s','MarkerEdgeColor','b');
plot(AoA(:,3),CM(:,3),'x','MarkerEdgeColor','m');
f1CM = fit(AoA(Np,1),CM(Np,1),'poly1');disp(f1CM);
f2CM = fit(AoA(Np,2),CM(Np,2),'poly1');disp(f2CM);
f3CM = fit(AoA(Np,3),CM(Np,3),'poly1');disp(f3CM);
plot(AoA(Np,1),f1CM(AoA(Np,1)),'-r');
plot(AoA(Np,2),f2CM(AoA(Np,2)),'-b');
plot(AoA(Np,3),f3CM(AoA(Np,3)),'-m');
legend('\delta_e = -18^o (Upward)','\delta_e = 0^o (Level)','\delta_e = +18^o (Downward)');
ylabel('Longitudinal Moment Coefficient (C_M)');
xlabel('Angle of Attack (\alpha) (degrees)');
title('Longitudinal Moment Coefficient');
hold off;grid on;

%% CD vs CL
fprintf('===========================================\n');
figure(7);clf;hold on;Np=1:1:11;
plot(CL(:,1),CD(:,1),'^','MarkerEdgeColor','r');
plot(CL(:,2),CD(:,2),'s','MarkerEdgeColor','b');
plot(CL(:,3),CD(:,3),'x','MarkerEdgeColor','m');
f1CLCD = fit(CL(Np,1),CD(Np,1),'poly2');disp(f1CLCD);
f2CLCD = fit(CL(Np,2),CD(Np,2),'poly2');disp(f2CLCD);
f3CLCD = fit(CL(Np,3),CD(Np,3),'poly2');disp(f3CLCD);
plot(CL(Np,1),f1CLCD(CL(Np,1)),'-r');
plot(CL(Np,2),f2CLCD(CL(Np,2)),'-b');
plot(CL(Np,3),f3CLCD(CL(Np,3)),'-m');
legend('\delta_e = -18^o (Upward)','\delta_e = 0^o (Level)','\delta_e = +18^o (Downward)');
ylabel('Drag Coefficient (C_D)');
xlabel('Lift Coefficient (C_L)');
title('Drag Polar');
hold off;grid on;

%% CM vs CL
fprintf('===========================================\n');
figure(8);clf;hold on;Np=1:1:11;
plot(CL(:,1),CM(:,1),'^','MarkerEdgeColor','r');
plot(CL(:,2),CM(:,2),'s','MarkerEdgeColor','b');
plot(CL(:,3),CM(:,3),'x','MarkerEdgeColor','m');
f1CLCM = fit(CL(Np,1),CM(Np,1),'poly1');disp(f1CLCM);
f2CLCM = fit(CL(Np,2),CM(Np,2),'poly1');disp(f2CLCM);
f3CLCM = fit(CL(Np,3),CM(Np,3),'poly1');disp(f3CLCM);
plot(CL(Np,1),f1CLCM(CL(Np,1)),'-r');
plot(CL(Np,2),f2CLCM(CL(Np,2)),'-b');
plot(CL(Np,3),f3CLCM(CL(Np,3)),'-m');
legend('\delta_e = -18^o (Upward)','\delta_e = 0^o (Level)','\delta_e = +18^o (Downward)');
ylabel('Longitudinal Moment Coefficient (C_M)');
xlabel('Lift Coefficient (C_L)');
title('C_M vs C_L');
hold off;grid on;

%% Table Data
fprintf('===========================================\n');
fprintf('### Table Data:\n');
fprintf(newline);

fprintf('Static Margin (-dCM/dCL):\n');
fprintf('Elevator Deflection = -18 deg, %.4f\n',-f1CLCM.p1);
fprintf('Elevator Deflection =   0 deg, %.4f\n',-f2CLCM.p1);
fprintf('Elevator Deflection = +18 deg, %.4f\n',-f3CLCM.p1);
fprintf(newline);

fprintf('Slope of CL vs Alpha Curve:\n');
fprintf('Elevator Deflection = -18 deg, %.4f\n',f1CL.p1);
fprintf('Elevator Deflection =   0 deg, %.4f\n',f2CL.p1);
fprintf('Elevator Deflection = +18 deg, %.4f\n',f3CL.p1);
fprintf(newline);

fprintf('Slope of CM vs Alpha Curve:\n');
fprintf('Elevator Deflection = -18 deg, %.4f\n',f1CM.p1);
fprintf('Elevator Deflection =   0 deg, %.4f\n',f2CM.p1);
fprintf('Elevator Deflection = +18 deg, %.4f\n',f3CM.p1);
fprintf(newline);

fprintf('Neutral Point (as fraction of chord length):\n');
fprintf('Elevator Deflection = -18 deg, %.4f\n',0.25-f1CLCM.p1);
fprintf('Elevator Deflection =   0 deg, %.4f\n',0.25-f2CLCM.p1);
fprintf('Elevator Deflection = +18 deg, %.4f\n',0.25-f3CLCM.p1);
fprintf(newline);

fprintf('Neutral Point (inches):\n');
fprintf('Elevator Deflection = -18 deg, %.4f\n',(0.25-f1CLCM.p1)*21.29*0.3937);
fprintf('Elevator Deflection =   0 deg, %.4f\n',(0.25-f2CLCM.p1)*21.29*0.3937);
fprintf('Elevator Deflection = +18 deg, %.4f\n\n',(0.25-f3CLCM.p1)*21.29*0.3937);

CMdeltaE = (f1CLCM(0)-f3CLCM(0))/((-18)-18);
fprintf('Elevator Power: %.4f\n',CMdeltaE);

deltaEforPositiveIntercept = 18-(f3CLCM(0)/CMdeltaE);
fprintf('Any elevator angle less then %.4f deg will \nresult in positive intercept of CM vs CL curve.\n',deltaEforPositiveIntercept);

%% Battery Requirement
V = 10;
t = 30/60;
h = 304.08;
rhoh = 1.347;
m = 0.8;
g = 9.81;
W = m*g;
phi = 20;
eta = 0.8;

Lreq = m*g/cosd(phi);
CLreq = 2*Lreq/(rhoh*V^2*S);
alphareq = (CLreq - f2CL.p2)/f2CL.p1;
CDreq = f2CD(alphareq);
Treq = 0.5*rhoh*V^2*S*CDreq; 
P = Treq*V;
Ereq = P*t/eta;
I_mAh = Ereq/12*1000;

fprintf('Current Requirements (I_mAh):');
disp(I_mAh);

%% Save Plots
fprintf('===========================================\n');
if exist('pp','file') && exist('p','file')
    % Code to clean up and save figure.
    % These functions are not in the standard Matlab release.
    % pp is abbreviated for "Pretty Plot" and p for "Print"
    ppOpt = ppOptions;
    ppOpt.Box = 'on';
    ppOpt.AxisGrid = 'on';
    ppOpt.MarkerSize = 6;
    ppOpt.LineWidth = 1.5;
    pp('all',ppOpt);p;
end